#!/bin/bash

mkdir -p /var/log/untangle-net-alpaca/

exec >> /var/log/untangle-net-alpaca/dhcp.log 2>&1

## Wait bridge check attempts for the bridge to come up(if this is a bridge)
BRIDGE_CHECK_ATTEMPTS=15

## This is the time to wait in between checking the bridge status
BRIDGE_CHECK_INTERVAL=1

## overrides
OVERRIDE_VARIABLES="/etc/untangle-net-alpaca/dhcp-overrides.${interface}"

## Debug function
#DEBUG=/bin/true
DEBUG=debug


debug()
{
    /bin/echo -e "[DEBUG: `date`] ${*}"
}

## Return a list of interfaces that are in bridge. 
bridge_port_list()
{
    local l_bridge="$1"
    
    test -n "${l_bridge}" && {
        find /sys/class/net/${l_bridge}/brif/ -maxdepth 1 -mindepth 1 -exec basename {} \; 2>/dev/null
    }
}

wait_for_bridge()
{
    local t_interface
    local t_ready="${BRIDGE_CHECK_ATTEMPTS}"
    local t_count
    
    for (( t_count = 0 ; t_count < ${BRIDGE_CHECK_ATTEMPTS} ; t_count++ )) {
        t_ready="true"
        ## Iterate all of the interfaces in the bridge
        for t_interface in `bridge_port_list ${interface}`; do
            ## Skip the files that don't exist.
            test -f /sys/class/net/${t_interface}/brport/state || continue
            
            ## Search for interfaces that are disabled or forwarding
            grep -q "[03]" /sys/class/net/${t_interface}/brport/state || t_ready="false" 
        done
        
        ${t_ready} && break
        
        sleep ${BRIDGE_CHECK_INTERVAL}
    }

    debug "Waited ${t_count} counts for the bridge(s) before configuring ${interface}"
}

${DEBUG} "dhclient-enter-hooks.d/net-alpaca ENTER [reason: \"$reason\" old_ip_address: \"$old_ip_address\" new_ip_address: \"$new_ip_address\"]"

${DEBUG} "Overriding make_resolv_conf."
# override this function to change the behavior
# dhclient-script later call it to write resolv.conf

make_resolv_conf() 
{ 
    if [ -n "$new_domain_name" -o -n "$new_domain_name_servers" ]; then
        local t_hash="`md5sum /etc/dnsmasq.conf`"
        ## if [ -n "$new_domain_name" ]; then
            ## echo search $new_domain_name >>$new_resolv_conf
        ## fi
        
        if [ -n "$new_domain_name_servers" ]; then
            for nameserver in $new_domain_name_servers ; do
                /bin/echo -e "#new_name_server=${nameserver} # uplink.${DHCP_UPLINK_INDEX}" >> /etc/dnsmasq.conf
            done
            
            sed -i -e "/^#*\s*server=.*uplink.${DHCP_UPLINK_INDEX}/d" -e 's/^#new_name_server=/server=/' /etc/dnsmasq.conf
        fi

        local t_new_hash="`md5sum /etc/dnsmasq.conf`"
                    
        ## Reststart DNS MASQ if necessary
        if [ "${t_hash}x" != "${t_new_hash}x" ]; then
            /bin/echo -e "[DEBUG: `date`] /etc/dnsmasq.conf changed. Restarting dnsmasq..."
            /etc/init.d/dnsmasq restart
            /bin/echo -e "[DEBUG: `date`] /etc/dnsmasq.conf changed. Restarting dnsmasq...done"
        fi
    fi

    return 0
}

## Wait for the bridge to come up
wait_for_bridge

if [ -f "${OVERRIDE_VARIABLES}" ]; then
    . ${OVERRIDE_VARIABLES}
else
    ${DEBUG} "Missing DHCP Override file, defaulting DHCP_UPLINK_INDEX to 1"
    DHCP_UPLINK_INDEX=1
fi

if [ "${DHCP_DNS_SERVERS}" = "ignore" ]; then
    ## Set here so the code below works cleanly
    DHCP_DNS_SERVERS=""
    new_domain_name_servers=""
fi

if [ "${DHCP_GATEWAY}" = "ignore" ]; then
    ${DEBUG} "Disabling gateway update."
    ## Set here so the code below works cleanly
    DHCP_GATEWAY=""
    new_routers=""
fi

case ${reason} in
    BOUND|RENEW|REBIND|REBOOT)
        ${DEBUG} "Enabling overrides on dhcp reason \"${reason}\""

        new_ip_address=${DHCP_IP_ADDRESS:-${new_ip_address}}
        if [ -n "${DHCP_IP_NETMASK}" ] ; then
            new_subnet_mask=${DHCP_IP_NETMASK}
            new_subnet_arg="netmask ${DHCP_IP_NETMASK}"
        fi

        if [ -n "${DHCP_MTU}" ] && [ ${DHCP_MTU} -ge 575 ]; then
            mtu_arg="mtu ${DHCP_MTU}"
        fi

        alpaca_new_routers=${DHCP_GATEWAY:-${new_routers}}
        new_routers=""

        new_domain_name_servers=${DHCP_DNS_SERVERS:-${new_domain_name_servers}}
        new_domain_name=${DHCP_DOMAIN_NAME:-${new_domain_name}}
        ;;
    *)
        ${DEBUG} "Ignoring overrides for dhcp reason \"${reason}\""
        ;;
esac


${DEBUG} "dhclient-enter-hooks.d/net-alpaca EXIT  [reason: \"$reason\" old_ip_address: \"$old_ip_address\" new_ip_address: \"$new_ip_address\"]"

return 0

