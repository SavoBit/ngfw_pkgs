#!/bin/dash

## Function to determine the pid of the process that owns the queue

UVM_PID="invalid"

# this needs to be turned off when the interface is brought up
TUN_DEV=utun

MARK_ANTISUB=$((0x01000000))
MARK_NOTRACK=$((0x02000000))

queue_owner()
{
    if [ "${UVM_PID}x" != "invalidx" ]; then return ; fi
    
    UVM_PID="invalid"
    
    if [ ! -f /proc/net/netfilter/nfnetlink_queue ] ; then return ; fi

    local t_queue_pid=`awk '{ print $2 }' /proc/net/netfilter/nfnetlink_queue`
    if [ -z "${t_queue_pid}" ]; then return ; fi
    
    UVM_PID=${t_queue_pid}  
}

## Function to determine if the UVM is running
is_uvm_running()
{
    queue_owner
    if [ "${UVM_PID}x" = "invalidx" ]; then return ; fi

    if [ ! -f "/proc/${UVM_PID}/cmdline" ]; then return ; fi
    
    grep -q com.untangle.uvm /proc/${UVM_PID}/cmdline 2>| /dev/null  && echo "true"
}

bunnicula_home()
{
    queue_owner
    
    if [ ! -f /proc/${UVM_PID}/cmdline ]; then return ; fi

    perl -pe 's/[^0-9=a-zA-Z\/\-\+\*\.]/\n/g' /proc/${UVM_PID}/cmdline | \
        awk '/^-Dbunnicula.home=/ { gsub( "-Dbunnicula.home=", "" ) ; print }'
}
  
## This setting should always be disabled.
if [ -f /proc/sys/net/ipv4/conf/${TUN_DEV}/rp_filter ] ; then
    echo 0 > /proc/sys/net/ipv4/conf/${TUN_DEV}/rp_filter
fi

## Set the path for the bunnicula networking script
UVM_NETWORKING_CONFIG=`bunnicula_home`/conf/networking.sh


if [ ! -f ${UVM_NETWORKING_CONFIG} ]; then 
  echo "'${UVM_NETWORKING_CONFIG}' does not exist."
  return 0
fi
 
. ${UVM_NETWORKING_CONFIG}


uvm_iptables_rules()
{
    # Do not conntrack entries in that have the NOTRACK bit set.
    ${IPTABLES} -A OUTPUT -t raw -m mark --mark ${MARK_NOTRACK}/${MARK_NOTRACK} -j NOTRACK
    
    ## Don't mangle resets, for some reason the routing drops them if they
    ## get mangled.
    ${IPTABLES} -A OUTPUT -t mangle -j RETURN -p tcp --tcp-flags SYN,ACK,RST ACK,RST

    #dont queue anthing on output
    # mangling notracked packets from the raw socket causes the packets to
    # be silently dropped in routing.  so we need to let them pass
    ${IPTABLES} -A OUTPUT -t mangle -j MARK -m mark --mark 0/${MARK_NOTRACK} --or-mark ${MARK_ANTISUB}

    #dont queue anthing from localhost
    ${IPTABLES} -A PREROUTING -t mangle -i lo -j MARK --or-mark ${MARK_ANTISUB}

    #redirect  anthing re-injected packets from the TUN interface to us
    ${IPTABLES} -A PREROUTING -t nat -i ${TUN_DEV} -t nat -p tcp \
        -j DNAT --to-destination 192.0.2.42:${TCP_REDIRECT_PORTS}

    # Ignore traffic that we have antisubscribed to.
    ${IPTABLES} -A POSTROUTING -t tune -m mark --mark ${MARK_ANTISUB}/${MARK_ANTISUB}  -j RETURN

    # Queue all of the SYN packets.
    ${IPTABLES} -A POSTROUTING -t tune -p tcp --syn -j NFQUEUE

    # Queue all of the UDP packets.
    ${IPTABLES} -A POSTROUTING -t tune -m addrtype --dst-type unicast -p udp -j NFQUEUE
}

