<%
intf = stage.interface
config_options = [[ "Static".t, "static"]]
config_options << [ "Dynamic (dhcp)".t, "dynamic" ] if stage.wan
config_options << [ "Bridge".t, "bridge" ] unless stage.wan
%>
<%= hidden_field_tag( "interfaceList[]", stage.id ) %>
<%= hidden_field_tag( "#{stage.id}.os_name", intf.os_name ) %>
<%= hidden_field_tag( "#{stage.id}.name", stage.name ) %>
<div id="<%= stage.id %>" style="display: none">
  <h1><%= stage.name %></h1>
  
  <ul class="text-fields">
    <li>
      <label for="config-type"><%= "Configuration Type:".t %></label>
      <%= select_tag( "#{stage.id}.type", options_for_select( config_options, config_options[0][0] )) %>
      <%= observe_field( "#{stage.id}.type", { :function => "setConfigType( '#{stage.id}' )" } ) %>
    </li>
  </ul>

  <%= render( :partial => "interface_config_static", 
              :locals => { :config_id => "#{stage.id}-static", :wan => stage.wan } ) %>

  <% if stage.wan %>
    <%= render( :partial => "interface_config_dynamic", 
                :locals => { :config_id => "#{stage.id}-dynamic", :wan => stage.wan } ) %>
  <% else %>
    <%= render( :partial => "interface_config_bridge", 
                :locals => { :config_id => "#{stage.id}-bridge", :wan => stage.wan } ) %>
  <% end %>
  
</div>
<%= javascript_tag <<EOF
interfaceArray.push( new Interface( '#{stage.id}', '#{intf.os_name}', '#{stage.name}' ));
/* Update all of the bridgeable interfaces when entering a stage */
Wizard.nextEnterCallback['#{stage.id}'] = function()
{ 
  updateBridges('#{stage.id}');
};
EOF
%>
<%= javascript_tag "setConfigType('#{stage.id}')" %>
