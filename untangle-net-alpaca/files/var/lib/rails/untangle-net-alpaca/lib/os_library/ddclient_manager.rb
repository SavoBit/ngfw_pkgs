class OSLibrary::DdclientManager < Alpaca::OS::ManagerBase
  include Singleton

  ConfigFile = "/etc/ddclient.conf"

  ConfigDaemon = "daemon_interval"
  ConfigRunDaemon = "run_daemon"
  ConfigProtocol = "protocol"
  ConfigLogin = "login"
  ConfigPassword = "password"
  ConfigServer = "server"
  ConfigPid = "pid"
  ConfigUse = "use"

  ConfigDaemonInterval = "300"

  ConfigService = {
    "ZoneEdit" => [ "zoneedit1", "www.zoneedit.com" ],
    #"No-IP" => [ "zoneedit1", "www.zoneedit.com" ],
    "EasyDNS" => [ "easydns", "members.easydns.com" ],
    "DynDNS" => [ "dyndns2", "members.dyndns.org" ]
  }

  DdclientRcd          = "/usr/sbin/update-rc.d ddclient defaults"
  DdclientCmd          = "/etc/init.d/ddclient "
  DdclientCmdStop  = DdclientCmd + " stop"
  DdclientCmdRestart  = DdclientCmd + " restart"
  DdclientConfFile    = "/etc/ddclient.conf"
  DdclientDefaultFile    = "/etc/default/ddclient"
  DdclientPidFile    = "/var/run/ddclient.pid"


  def register_hooks
    os["network_manager"].register_hook( -100, "ddclient_manager", "write_files", :hook_commit )
  end
  
  def hook_commit
    settings = DdclientSettings.find( :first )
    return if ( settings.nil? )
    
    cfg = []
    defaults = []
    
    if ( settings.enabled )
      conditions = [ "wan=?", true ]
      wanInterface = Interface.find( :first, :conditions => conditions )
      #logger.debug("settings.service is: " + settings.service)
      protocol = ConfigService[settings.service][0]
      server = ConfigService[settings.service][1]
      [ [ ConfigPid, DdclientPidFile ],
        [ ConfigUse, "if, if=" + wanInterface.os_name ],
        [ ConfigProtocol, protocol ],
        [ ConfigLogin, settings.login ],
        [ ConfigPassword, settings.password ],
        [ ConfigServer, server + '" "' +settings.hostname ]
      ].each do |var,val|
        next if ( val.nil? || val == "null" )
        cfg << "#{var}=\"#{val}\""
      end

      [ [ ConfigDaemon, ConfigDaemonInterval ],
        [ ConfigRunDaemon, settings.enabled ]
        ].each do |var,val|
        next if ( val.nil? || val == "null" )
        defaults << "#{var}=\"#{val}\""
      end

    end
    
    
    #logger.debug( "running: " + DdclientCmdStop )
    run_command( DdclientCmdStop  )
    os["override_manager"].write_file( ConfigFile, header, "\n", cfg.join( "\n" ), "\n" )
    os["override_manager"].write_file( DdclientDefaultFile, header, "\n", defaults.join( "\n" ), "\n" )
    if ( settings.enabled )
      #logger.debug( "running: " + DdclientRcd )
      run_command( DdclientRcd  )
      #logger.debug( "running: " + DdclientCmdRestart )
      run_command( DdclientCmdRestart  )
    end

    #run_command( "hostname #{settings.hostname}" )
  end
  
  def header
    <<EOF
## #{Time.new}
## Auto Generated by the Untangle Net Alpaca
## If you modify this file manually, your changes
## may be overriden
EOF
  end
end
