class OSLibrary::Debian::UvmManager < OSLibrary::UvmManager
  include Singleton

  ## uvm subscription file
  UvmSubscriptionFile = "#{OSLibrary::Debian::PacketFilterManager::ConfigDirectory}/700-uvm"

  ## UVM interface properties file
  UvmInterfaceProperties = "/etc/untangle-net-alpaca/interface.properties"
  UvmInterfaceOrderProperty = "com.untangle.interface-order"

  def register_hooks
    os["packet_filter_manager"].register_hook( 100, "uvm_manager", "write_files", :hook_write_files )
    os["network_manager"].register_hook( 100, "uvm_manager", "write_files", :hook_write_files )
  end

  ## Write out the files to load all of the iptables rules necessary to queue traffic.
  def hook_write_files
    write_iptables_script
    write_interface_order
  end
  
  private

  def write_iptables_script
    text = header

    ## Presently there are no settings for this.
    text += <<EOF
HELPER_SCRIPT="/usr/share/untangle-net-alpaca/scripts/uvm/iptables"

if [ ! -f ${HELPER_SCRIPT} ]; then
  echo "[`date`] The script ${HELPER_SCRIPT} is not available"
  return 0
fi

. ${HELPER_SCRIPT}

if [ "`is_uvm_running`x" = "truex" ]; then
  echo "[`date`] The UVM running, inserting queueing hooks"
  uvm_iptables_rules
else
  echo "[`date`] The UVM is currently not running"
fi

return 0

EOF

    os["override_manager"].write_file( UvmSubscriptionFile, text, "\n" )    
  end

  ## This writes a file that indicates to the UVM the order
  ## of the interfaces
  def write_interface_order
    ## Create an interface map
    interfaces = {}
    Interface.find( :all ).each { |interface| interfaces[interface.index] = interface }
    
    settings = UvmSettings.find( :first )
    settings = UvmSettings.new if settings.nil?
    
    intf_order = settings.interface_order
    intf_order = UvmHelper::DefaultOrder if ApplicationHelper.null?( intf_order )

    intf_order = intf_order.split( "," ).map { |idx| idx.to_i }.delete_if { |idx| idx == 0 }
    
    values = []
    ## Go through and delete the interfaces that are in the map.
    intf_order.each do |idx|
      next values << "VPN:tun0:#{idx}" if idx == UvmHelper::VpnIndex
      
      interface = interfaces[idx]
      next if interface.nil?
      
      ## Delete the item at index for the second loop
      interfaces.delete( idx )
      
      ## Append the index
      values << interface_property( interface )
    end

    ## Append the remaining values ordered by their index.
    values += interfaces.keys.sort.map { |k| interface_property( interfaces[k] ) }

    os["override_manager"].write_file( UvmInterfaceProperties, <<EOF )
# #{Time.new}
# Auto Generated by the Untangle Net Alpaca
# If you modify this file manually, your changes
# may be overriden
#{UvmInterfaceOrderProperty}=#{values.join( "," )}
EOF
  end

  ## Review: This should be a global function
  def header
    <<EOF
#!/bin/dash

## #{Time.new}
## Auto Generated by the Untangle Net Alpaca
## If you modify this file manually, your changes
## may be overriden

EOF
  end

  def interface_property( interface )
    "#{interface.name}:#{interface.os_name}:#{interface.index}"
  end
end
