class OSLibrary::Debian::UvmManager < OSLibrary::UvmManager
  include Singleton

  ## uvm subscription file
  UvmSubscriptionFile = "#{OSLibrary::Debian::PacketFilterManager::ConfigDirectory}/700-uvm"
  
  def register_hooks
    os["packet_filter_manager"].register_hook( 100, "uvm_manager", "write_files", :hook_write_files )
  end

  ## Write out the files to load all of the iptables rules necessary to queue traffic.
  def hook_write_files
    text = header

    ## Presently there are no settings for this.
    text += <<EOF
HELPER_SCRIPT="/usr/share/untangle-net-alpaca/scripts/uvm/iptables"

if [ ! -f ${HELPER_SCRIPT} ]; then
  echo "[`date`] The script ${HELPER_SCRIPT} is not available"
  return 0
fi

. ${HELPER_SCRIPT}

if [ "`is_uvm_running`x" = "truex" ]; then
  echo "[`date`] The UVM running, inserting queueing hooks"
  uvm_iptables_rules
else
  echo "[`date`] The UVM is currently not running"
fi

return 0

EOF

    os["override_manager"].write_file( UvmSubscriptionFile, text, "\n" )
  end

  ## Review: This should be a global function
  def header
    <<EOF
#!/bin/dash

## #{Time.new}
## Auto Generated by the Untangle Net Alpaca
## If you modify this file manually, your changes
## may be overriden

EOF
  end
end
