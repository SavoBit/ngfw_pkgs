#! /bin/bash

. /usr/share/debconf/confmodule

APT_CACHE_DIR="/var/cache/apt/archives"

ourInit() {
  if [ -x /usr/sbin/invoke-rc.d ] && [ ! "`readlink /usr/sbin/invoke-rc.d`" = /bin/true ] ; then
    invoke-rc.d $1 $2
  else
    /etc/init.d/$1 $2
  fi
}

ourInit rsyslog restart
rm -f /var/log/uvm/[0-9]*log /var/log/uvm/node[0-9]*log /var/log/uvm/*:.log /var/log/uvm/events.log

# only upon first install of this package
if [ $1 = "configure" ] && [ -z "$2" ] ; then
  # reconfigure debconf
  tmpFile=`mktemp`
  awk '{if ($0 ~ /Name: debconf\/priority/) { do_priority=1; print $0 } else if (do_priority == 1) { if ($0 ~ /Value/) { do_priority=0; print "Value: critical" } else print $0; } else if ($0 ~ /Name: debconf\/frontend/) { do_frontend=1; print $0 } else if (do_frontend == 1) { if ($0 ~ /Value/) { do_frontend=0; print "Value: Noninteractive" } else print $0 } else print $0}' /var/cache/debconf/config.dat > $tmpFile
  mv $tmpFile /var/cache/debconf/config.dat

  # load factory defaults
  bash /usr/share/untangle/bin/factory-defaults

  # prepare for extraction of the ISO brand
  mkdir -p /usr/share/untangle/tmp

  rm /etc/resolv.conf
fi

# Have cron.daily run earlier in the day, at a random time between 1:00 and 2:00
CRONTAB_FILE=/etc/crontab
if [ -f "${CRONTAB_FILE}" ] ; then
    let "ranmin = $RANDOM % 60"
    grep -sq "^25 6" ${CRONTAB_FILE} && sed -i -e "s|^25 6|${ranmin} 1|" ${CRONTAB_FILE}
fi

# Fix up boxes so they don't fsck after 6 months.  Now only limit is 32 reboots.
rootdev=`awk '/ \/ / {print $1}' /etc/mtab`
if [ -z "$rootdev" -a -f /etc/fstab ]; then
    # Special handling for install-time when /etc/mtab isn't valid
    rootdev=`awk '/ \/ / {print $1}' /etc/fstab`
fi
if [ -n "$rootdev" ]; then
    tune2fs -i 0 $rootdev
fi

# fix problem about duplicate SSH keys
/usr/share/untangle-system-config/fix-ssh-keys.sh

# Fix problems with different /etc/hosts.allow and /etc/hosts.deny
if [ `md5sum /etc/hosts.deny | awk '{ print $1 }'` =  "688ab5a561c1a01a8e5b533aca29442c" ]; then
    cat<<EOF > /etc/hosts.deny
# /etc/hosts.deny: list of hosts that are _not_ allowed to access the system.
#                  See the manual pages hosts_access(5) and hosts_options(5).
#
# Example:    ALL: some.host.name, .some.domain
#             ALL EXCEPT in.fingerd: other.host.name, .other.domain
#
# If you're going to protect the portmapper use the name "portmap" for the
# daemon name. Remember that you can only use the keyword "ALL" and IP
# addresses (NOT host or domain names) for the portmapper, as well as for
# rpc.mountd (the NFS mount daemon). See portmap(8) and rpc.mountd(8)
# for further information.
#
# The PARANOID wildcard matches any host whose name does not match its
# address.

# You may wish to enable this to ensure any programs that don't
# validate looked up hostnames still leave understandable logs. In past
# versions of Debian this has been the default.
# ALL: PARANOID
EOF

    chmod 0644 /etc/hosts.deny
    chown root:root /etc/hosts.deny
fi

if [ `md5sum /etc/hosts.allow | awk '{ print $1 }'` = "bf2b68cb7f76a83859ae52e0149a85cb" ]; then
    cat <<EOF > /etc/hosts.allow
# /etc/hosts.allow: list of hosts that are allowed to access the system.
#                   See the manual pages hosts_access(5) and hosts_options(5).
#
# Example:    ALL: LOCAL @some_netgroup
#             ALL: .foobar.edu EXCEPT terminalserver.foobar.edu
#
# If you're going to protect the portmapper use the name "portmap" for the
# daemon name. Remember that you can only use the keyword "ALL" and IP
# addresses (NOT host or domain names) for the portmapper, as well as for
# rpc.mountd (the NFS mount daemon). See portmap(8) and rpc.mountd(8)
# for further information.
#
EOF

    chmod 0644 /etc/hosts.allow
    chown root:root /etc/hosts.allow
fi

# enable bootlogd
perl -i -pe 's/^BOOTLOGD_ENABLE=.*/BOOTLOGD_ENABLE=Yes/' /etc/default/bootlogd

exit 0
