#! /bin/bash

set -e

usage() {
  echo "$0 -f <image-file> -k <kernel> -i <initrd> -n <nic-to-bridge> [-m <memory>]"
  exit 1
}

if [ $(id -u) != 0 ] ; then
  exec sudo -E $0 $*
fi

#############
#############
## CLI args
#############
#############
while getopts f:k:i:m:n: option ; do
  case "$option" in
    k) KERNEL="$OPTARG" ;;
    f) IMAGE="$OPTARG" ;;
    i) INITRD="$OPTARG" ;;
    m) MEMORY="$OPTARG" ;;
    n) NIC="$OPTARG" ;;
    h) usage ;;
    \?) usage ;;
  esac
done

#########
#########
## main
#########
#########

##################
# check CLI args
{ [[ -z "$IMAGE" ]] || [[ -z "$KERNEL" ]] || [[ -z "$INITRD" ]] || [[ -z $NIC ]] ; } && usage

# default RAM to 1G
[[ -z "$MEMORY" ]] && MEMORY="2G"

#####################################################################
# setup bridge networking for both external and internal interfaces
# in the VM

# FIXME: support multiples bridges and qemu instances, by supporting
#        bridge-(ext|int)N instead of just bridge-(ext|int)0

# setup bridge for external interface
# FIXME: adding $NIC with an already-defined IP, to a bridge without
#        an IP, messes up ARP and access to the $NIC's subnet from the
#        host itself. Any traffic that's routed to the outside is
#        fine, though.  To fix that, I manually force my subnet traffic
#        on the bridge interface:
#   ip route del default dev $NIC
#   ip route del 172.16.25.0/24 dev $NIC
#   ip route add 172.16.25.0/24 dev $BRIDGE_EXT
#   ip route add default via 172.16.25.1

#BRIDGE_EXT="qemubr-ext0"
BRIDGE_EXT=$NIC
if ! ip link ls ${BRIDGE_EXT} >/dev/null ; then
    ip link add $BRIDGE_EXT type bridge
    ip link set dev $BRIDGE_EXT up
fi
#ip link set $NIC master $BRIDGE_EXT || true

# setup bridge for internal interface
BRIDGE_INT="qemubr-int0"
if ! ip link ls ${BRIDGE_INT} >/dev/null ; then
    ip link add $BRIDGE_INT type bridge
    ip link set dev $BRIDGE_INT up
    ip route add 192.168.2.0/24 dev $BRIDGE_INT
fi

# make sure we tear down those bridges upon exiting
#trap "ip link set $NIC nomaster ; ip link del $BRIDGE_EXT; ip link del $BRIDGE_INT" 0
#trap "ip link set $NIC nomaster" 0

########################
# load required modules
modprobe virtio-blk
modprobe virtio-pci

########################
# start the Untangle VM
kvm -enable-kvm \
    -m $MEMORY \
    -kernel $KERNEL \
    -initrd $INITRD \
    -drive if=none,format=raw,id=hd0,file=$IMAGE \
    -device driver=virtio-blk-pci,id=drive0,drive=hd0 \
    -monitor stdio \
    -append "root=/dev/vda1 systemd.log_level=debug systemd.log_target=console net.ifnames=0" \
    -net nic -net bridge,br=$BRIDGE_EXT \
    -net nic -net bridge,br=$BRIDGE_INT

    # # featureful, but needs way more manual setup on the host
    # -device e1000,netdev=network0,mac=12:34:56:78:90:ab \
    # -netdev tap,id=network0,ifname=tap0,script=no,downscript=no
    # # host-only
    # -device e1000,netdev=network0 \
    # -netdev user,id=network0
