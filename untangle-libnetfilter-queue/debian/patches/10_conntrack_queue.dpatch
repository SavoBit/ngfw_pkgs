#! /bin/sh /usr/share/dpatch/dpatch-run
## 10_conntrack_queue.dpatch by  <rbscott@rbscott-eg>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad untangle-libnetfilter-queue/include/libnetfilter_queue/libnetfilter_queue.h /tmp/dpep.fHcnhi/untangle-libnetfilter-queue/include/libnetfilter_queue/libnetfilter_queue.h
--- untangle-libnetfilter-queue/include/libnetfilter_queue/libnetfilter_queue.h	2007-03-21 16:49:46.000000000 -0700
+++ /tmp/dpep.fHcnhi/untangle-libnetfilter-queue/include/libnetfilter_queue/libnetfilter_queue.h	2007-11-14 14:55:26.000000000 -0800
@@ -18,6 +18,88 @@
 
 #include <libnetfilter_queue/linux_nfnetlink_queue.h>
 
+/* The following is from nf_conntrack_tuple.h */
+
+#define NF_CT_TUPLE_L3SIZE      4
+
+/* The l3 protocol-specific manipulable parts of the tuple: always in
+   network order! */
+union nf_conntrack_address {
+        u_int32_t all[NF_CT_TUPLE_L3SIZE];
+        __be32 ip;
+        __be32 ip6[4];
+};
+
+/* The protocol-specific manipulable parts of the tuple: always in
+   network order! */
+union nf_conntrack_man_proto
+{
+        /* Add other protocols here. */
+        u_int16_t all;
+
+        struct {
+                __be16 port;
+        } tcp;
+        struct {
+                __be16 port;
+        } udp;
+        struct {
+                __be16 id;
+        } icmp;
+        struct {
+                __be16 port;
+        } sctp;
+        struct {
+                __be16 key;     /* GRE key is 32bit, PPtP only uses 16bit */
+        } gre;
+};
+
+/* The manipulable part of the tuple. */
+struct nf_conntrack_man
+{
+        union nf_conntrack_address u3;
+        union nf_conntrack_man_proto u;
+        /* Layer 3 protocol */
+        u_int16_t l3num;
+};
+
+/* This contains the information to distinguish a connection. */
+struct nf_conntrack_tuple
+{
+        struct nf_conntrack_man src;
+
+        /* These are the parts of the tuple which are fixed. */
+        struct {
+                union nf_conntrack_address u3;
+                union {
+                        /* Add other protocols here. */
+                        u_int16_t all;
+
+                        struct {
+                                __be16 port;
+                        } tcp;
+                        struct {
+                                __be16 port;
+                        } udp;
+                        struct {
+                                u_int8_t type, code;
+                        } icmp;
+                        struct {
+                                __be16 port;
+                        } sctp;
+                        struct {
+                                __be16 key;
+                        } gre;
+                } u;
+
+                /* The protocol. */
+                u_int8_t protonum;
+
+                /* The direction (for tuplehash) */
+                u_int8_t dir;
+        } dst;
+};
+
 struct nfq_handle;
 struct nfq_q_handle;
 struct nfq_data;
@@ -94,6 +176,10 @@
 /* return -1 if problem, length otherwise */
 extern int nfq_get_payload(struct nfq_data *nfad, char **data);
 
+/* return -1 if problem, 0 otherwise */
+int nfq_get_conntrack(struct nfq_data *nfad, struct nf_conntrack_tuple** original, struct nf_conntrack_tuple** reply )
+
+
 
 
 #endif	/* __LIBNFQNETLINK_H */
diff -urNad untangle-libnetfilter-queue/src/libnetfilter_queue.c /tmp/dpep.fHcnhi/untangle-libnetfilter-queue/src/libnetfilter_queue.c
--- untangle-libnetfilter-queue/src/libnetfilter_queue.c	2007-03-21 16:49:46.000000000 -0700
+++ /tmp/dpep.fHcnhi/untangle-libnetfilter-queue/src/libnetfilter_queue.c	2007-11-14 14:56:20.000000000 -0800
@@ -461,3 +461,13 @@
 
 	return -1;
 }
+
+int nfq_get_conntrack(struct nfq_data *nfad, struct nf_conntrack_tuple** original, struct nf_conntrack_tuple** reply )
+{
+	*original = nfnl_get_pointer_to_data(nfad->data, NFQA_CT_DIR_ORIGINAL, struct nf_conntrack_tuple);
+	if (*original==NULL) return -1;
+	*reply = nfnl_get_pointer_to_data(nfad->data, NFQA_CT_DIR_REPLY, struct nf_conntrack_tuple);
+	if (*reply==NULL) return -1;
+	
+	return 0;
+}
