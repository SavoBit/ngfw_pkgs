#!/bin/sh

# FIXME should only add routse for active WANs

# script
SCRIPT_ADD_UPLINK="/usr/share/untangle-netd/bin/add-uplink.sh"

# This is the table name prefix of Untangle WAN tables
TABLE_PREFIX="uplink."

## All of the untangle rules MUST starting in this priority prefix.  
## This makes it easy to flush all of the untangle routing rules.
UNTANGLE_PRIORITY_BASE="36"

## Maximum number of interfaces
MAX_INTERFACES=250

## Functions

debug()
{
    /bin/echo -e "[NETD DEBUG: `date`] ${*}"
}

debug_ip()
{
    debug ip $*
    ip $*
}

debug_run_parts()
{
    debug run-parts $*
    run-parts -v $*
}

## Return a list of all of the bridges
bridge_list()
{
    find /sys/class/net/*/bridge -name 'bridge_id' 2>/dev/null | sed -e 's|/sys/class/net/\([^/]*\)/.*|\1|'
}

## Return a list of interfaces that are in bridge. 
bridge_port_list()
{
    local l_bridge=$1
    
    test -n "${l_bridge}" && {
        find /sys/class/net/${l_bridge}/brif/ -maxdepth 1 -mindepth 1 -exec basename {} \; 2>/dev/null
    }
}

## Deconfigure all of the active bridges
bridge_destroy_all()
{
    local l_bridge
    local l_port
 
    for l_bridge in `bridge_list` ; do
        $DEBUG "Destroying bridge: '${l_bridge}'."
        for l_port in `bridge_port_list ${l_bridge}` ; do
            $DEBUG "Removing interface '${l_port}' from the bridge '${l_bridge}'."
            brctl delif ${l_bridge} ${l_port}
            ifconfig ${l_port} 0.0.0.0
            ifconfig ${l_port} down
        done
        ifconfig ${l_bridge} down
        brctl delbr ${l_bridge}
    done
}

## Delete all of the rules thare are on one of the uplink tables.
flush_uplink_tables()
{
    local t_route
    ip route show table all | grep  "${TABLE_PREFIX}" | while read t_route ; do
        ${IP} route delete ${t_route}
    done
}

## Remove all of the rules
flush_uplink_rules()
{
    local t_priority
    
    for t_priority in `ip rule show | awk "/^${UNTANGLE_PRIORITY_BASE}[0-9][0-9][0-9]:/ { sub( \":\", \"\", \\$1 ) ; print \\$1 }"` ; do
        ${IP} rule delete priority ${t_priority}
    done    
}

networking_pre_restart_hook()
{
    $DEBUG "networking_pre_restart_hook"

    $DEBUG "running pre-network-hooks"
    $RUN_PARTS /etc/untangle-netd/pre-network-hook.d

    # TEMP to disable alpaca
    rm -f /etc/network/if-up.d/alpaca
    rm -f /etc/network/if-pre-up.d/alpaca

    $DEBUG "cleanup: Stopping all dhcp daemons"
    ## If there are any processes, wait a little, then make sure they are gone.
    pkill -QUIT '(dhclient3|pump|dhclient)' && { sleep 1 ; pkill '(dhclient3|pump|dhclient)'; }
    
    $DEBUG "cleanup: Flushing interface addresses."
    ip addr flush scope global 2>/dev/null
    
    $DEBUG "cleanup: Flush all uplink tables."
    flush_uplink_tables

    $DEBUG "cleanup: Flush all uplink rules."
    flush_uplink_rules
    
    $DEBUG "cleanup: Stopping all active PPP Connections."
    poff -a >/dev/null 2>&1
    
    $DEBUG "cleanup: Destroying all of the bridges."
    bridge_destroy_all
}

netd_address()
{
    #$DEBUG "netd_address: IF_NETD_V4_ADDRESS = ${IF_NETD_V4_ADDRESS}"
    #$DEBUG "netd_address: IF_NETD_V4_NETMASK = ${IF_NETD_V4_NETMASK}"
    #$DEBUG "netd_address: IF_NETD_V4_GATEWAY = ${IF_NETD_V4_GATEWAY}"

    if [ -n "${IF_NETD_V4_ADDRESS}" ] && [ -n "${IF_NETD_V4_NETMASK}" ]; then
        #$DEBUG ifconfig $IFACE ${IF_NETD_V4_ADDRESS} netmask ${IF_NETD_V4_NETMASK} up
        ifconfig $IFACE ${IF_NETD_V4_ADDRESS} netmask ${IF_NETD_V4_NETMASK} up
    fi
    
    if [ -n "${IF_NETD_V4_GATEWAY}" ]; then
        #$DEBUG ip route replace default via ${IF_NETD_V4_GATEWAY}
        ip route replace default via ${IF_NETD_V4_GATEWAY}
    fi
    
    return 0
}

networking_post_restart_hook()
{
    $DEBUG "networking_post_restart_hook"

    # FIXME
    # restart run the necessary stuff 
    # This is what "update-address" used to be

    # disable alpaca iptables rules
    # TEMP
    if [ -f /etc/untangle-net-alpaca/update-address.d/95-iptables ] ; then
        mv /etc/untangle-net-alpaca/update-address.d/95-iptables /etc/untangle-net-alpaca/update-address.d/95-iptables.off
    fi
    if [ -f /etc/untangle-net-alpaca/update-address.d/98-restart-services ] ; then
        mv /etc/untangle-net-alpaca/update-address.d/98-restart-services /etc/untangle-net-alpaca/update-address.d/98-restart-services.off
    fi

    # disable alpaca iptables rules
    # TEMP
    if [ -f /etc/init.d/untangle-net-alpaca-iptables ] ; then
        mv /etc/init.d/untangle-net-alpaca-iptables /etc/init.d/untangle-net-alpaca-iptables.off
    fi
    
    # write a temp redirect to call netd iptables rules instead
    rm -f /etc/untangle-net-alpaca/update-address.d/96-iptables
    ln -s /usr/share/untangle-netd/bin/generate-iptables-rules.sh /etc/untangle-net-alpaca/update-address.d/96-iptables

    $DEBUG "running post-network-hooks"
    $RUN_PARTS /etc/untangle-netd/post-network-hook.d

    # call alpaca update-address
    # this is just until netd has implemented the networking restart scripts
    # TEMP
    $DEBUG "running alpaca update-address"
    $RUN_PARTS /etc/untangle-net-alpaca/update-address.d

    return 0
}

uplink_routes()
{
    local t_rt_table
    local t_priority

    [ -z "$IF_NETD_V4_GATEWAY" ] && {
        $DEBUG "skipping uplink for ${IFACE}"
        return 0
    }

    [ -z "$IF_NETD_V4_ADDRESS" ] && {
        $DEBUG "skipping uplink for ${IFACE}"
        return 0
    }

    [ -x "${SCRIPT_ADD_UPLINK}" ] || {
        $DEBUG "Missing the script '${SCRIPT_ADD_UPLINK}'."
        return 0        
    }

    [ -z "$IF_NETD_INTERFACE_INDEX" ] && {
        $DEBUG "Interface ${IFACE} is missing the interface index."
        return 0
    }
    
    t_rt_table="${TABLE_PREFIX}${IF_NETD_INTERFACE_INDEX}"
    ${SCRIPT_ADD_UPLINK} ${IFACE} ${IF_NETD_V4_GATEWAY} ${t_rt_table}
}

## Start of script

#DEBUG=/bin/true
#IP="ip"
#RUN_PARTS="run-parts"

DEBUG="debug"
IP="debug_ip"
RUN_PARTS="debug_run_parts"

$DEBUG "if-up.d start [$IFACE]"

if [ $IFACE == "networking_pre_restart_hook" ] ; then
    networking_pre_restart_hook
    $DEBUG "if-up.d end   [$IFACE]"
    exit 0
fi

if [ $IFACE == "networking_post_restart_hook" ] ; then
    networking_post_restart_hook
    $DEBUG "if-up.d end   [$IFACE]"
    exit 0
fi

netd_address

uplink_routes

$DEBUG "if-up.d end   [$IFACE]"

## always exit 0
exit 0
