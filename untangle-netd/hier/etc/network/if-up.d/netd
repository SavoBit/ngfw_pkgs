#!/bin/sh

debug()
{
    /bin/echo -e "[NETD DEBUG: `date`] ${*}"
}

debug_ip()
{
    debug ip $*
    ip $*
}

debug_run_parts()
{
    debug run-parts $*
    run-parts -v $*
}

## Return a list of all of the bridges
bridge_list()
{
    find /sys/class/net/*/bridge -name 'bridge_id' 2>/dev/null | sed -e 's|/sys/class/net/\([^/]*\)/.*|\1|'
}

## Return a list of interfaces that are in bridge. 
bridge_port_list()
{
    local l_bridge=$1
    
    test -n "${l_bridge}" && {
        find /sys/class/net/${l_bridge}/brif/ -maxdepth 1 -mindepth 1 -exec basename {} \; 2>/dev/null
    }
}

## Deconfigure all of the active bridges
bridge_destroy_all()
{
    local l_bridge
    local l_port
 
    for l_bridge in `bridge_list` ; do
        $DEBUG "Destroying bridge: '${l_bridge}'."
        for l_port in `bridge_port_list ${l_bridge}` ; do
            $DEBUG "Removing interface '${l_port}' from the bridge '${l_bridge}'."
            brctl delif ${l_bridge} ${l_port}
            ifconfig ${l_port} 0.0.0.0
            ifconfig ${l_port} down
        done
        ifconfig ${l_bridge} down
        brctl delbr ${l_bridge}
    done
}

networking_pre_restart_hook()
{
    $DEBUG "networking_pre_restart_hook"

    $DEBUG "running pre-network-hooks"
    $RUN_PARTS /etc/untangle-netd/pre-network-hook.d

    # TEMP to disable alpaca
    rm -f /etc/network/if-up.d/alpaca
    rm -f /etc/network/if-pre-up.d/alpaca

    $DEBUG "cleanup: Stopping all dhcp daemons"
    ## If there are any processes, wait a little, then make sure they are gone.
    pkill -QUIT '(dhclient3|pump|dhclient)' && { sleep 1 ; pkill '(dhclient3|pump|dhclient)'; }
    
    $DEBUG "cleanup: Flushing interface addresses."
    ip addr flush scope global 2>/dev/null
    
    $DEBUG "cleanup: Stopping all active PPP Connections."
    poff -a >/dev/null 2>&1
    
    $DEBUG "cleanup: Destroying all of the bridges."
    bridge_destroy_all
}

netd_address()
{
    #$DEBUG "netd_address: IF_NETD_V4_ADDRESS = ${IF_NETD_V4_ADDRESS}"
    #$DEBUG "netd_address: IF_NETD_V4_NETMASK = ${IF_NETD_V4_NETMASK}"
    #$DEBUG "netd_address: IF_NETD_V4_GATEWAY = ${IF_NETD_V4_GATEWAY}"

    if [ -n "${IF_NETD_V4_ADDRESS}" ] && [ -n "${IF_NETD_V4_NETMASK}" ]; then
        #$DEBUG ifconfig $IFACE ${IF_NETD_V4_ADDRESS} netmask ${IF_NETD_V4_NETMASK} up
        ifconfig $IFACE ${IF_NETD_V4_ADDRESS} netmask ${IF_NETD_V4_NETMASK} up
    fi

    if [ -n "${IF_NETD_V6_ADDRESS}" ] && [ -n "${IF_NETD_V6_NETMASK}" ]; then
        debug "/etc/network/if-up.d/netd: FIXME implement IPv6 address/netmask"
    fi
    
    return 0
}

networking_post_restart_hook()
{
    $DEBUG "networking_post_restart_hook"

    $DEBUG "running post-network-hooks"
    $RUN_PARTS /etc/untangle-netd/post-network-hook.d

    return 0
}

uplink_routes()
{
    local table_name

    [ -z "$IF_NETD_INTERFACE_INDEX" ] && {
        $DEBUG "Interface ${IFACE} is missing the interface index."
        return 0
    }

    if [ -n "$IF_NETD_V4_GATEWAY" ] ; then
        table_name="uplink.${IF_NETD_INTERFACE_INDEX}"
        /usr/share/untangle-netd/bin/add-uplink.sh ${IFACE} ${IF_NETD_V4_GATEWAY} ${table_name}
    fi

    if [ -n "$IF_NETD_V6_GATEWAY" ] ; then
        table_name="uplink.${IF_NETD_INTERFACE_INDEX}"
        /usr/share/untangle-netd/bin/add-uplink.sh ${IFACE} ${IF_NETD_V6_GATEWAY} ${table_name}
    fi
}

write_status_file()
{
    [ -z "$IF_NETD_INTERFACE_INDEX" ] && {
        $DEBUG "Interface ${IFACE} is missing the interface index."
        return 0
    }

    $DEBUG "writing /var/lib/untangle-netd/interface-${IF_NETD_INTERFACE_INDEX}-status.js"
    /usr/share/untangle-netd/bin/write-interface-status.py -I ${IFACE} -i ${IF_NETD_INTERFACE_INDEX} -w /var/lib/untangle-netd/interface-${IF_NETD_INTERFACE_INDEX}-status.js

    $DEBUG "writing /var/lib/untangle-netd/interface-${IFACE}-status.js"
    /usr/share/untangle-netd/bin/write-interface-status.py -I ${IFACE} -i ${IF_NETD_INTERFACE_INDEX} -w /var/lib/untangle-netd/interface-${IFACE}-status.js
}

## Start of script

#DEBUG=/bin/true
#IP="ip"
#RUN_PARTS="run-parts"

DEBUG="debug"
IP="debug_ip"
RUN_PARTS="debug_run_parts"

$DEBUG "if-up.d start [$IFACE]"

if [ "$IFACE" = "networking_pre_restart_hook" ] ; then
    networking_pre_restart_hook
    $DEBUG "if-up.d end   [$IFACE]"
    exit 0
fi

if [ "$IFACE" = "networking_post_restart_hook" ] ; then
    networking_post_restart_hook
    $DEBUG "if-up.d end   [$IFACE]"
    exit 0
fi

netd_address

uplink_routes

write_status_file

$DEBUG "if-up.d end   [$IFACE]"

## always exit 0
exit 0
