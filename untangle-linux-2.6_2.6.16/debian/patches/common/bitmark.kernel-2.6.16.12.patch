diff -Nru linux-2.6.14.2-orig/arch/i386/defconfig linux-2.6.14.2-mv/arch/i386/defconfig
--- linux-2.6.14.2-orig/arch/i386/defconfig	2005-11-10 21:33:12.000000000 -0800
+++ linux-2.6.14.2-mv/arch/i386/defconfig	2005-11-14 11:17:04.701316086 -0800
@@ -508,6 +508,7 @@
 CONFIG_IP_NF_MATCH_MAC=y
 CONFIG_IP_NF_MATCH_PKTTYPE=y
 CONFIG_IP_NF_MATCH_MARK=y
+CONFIG_IP_NF_MATCH_BITMARK=y
 CONFIG_IP_NF_MATCH_MULTIPORT=y
 CONFIG_IP_NF_MATCH_TOS=y
 CONFIG_IP_NF_MATCH_RECENT=y
diff -Nru linux-2.6.14.2-orig/include/linux/netfilter_ipv4/ipt_bitmark.h linux-2.6.14.2-mv/include/linux/netfilter_ipv4/ipt_bitmark.h
--- linux-2.6.14.2-orig/include/linux/netfilter_ipv4/ipt_bitmark.h	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.14.2-mv/include/linux/netfilter_ipv4/ipt_bitmark.h	2005-11-14 11:17:04.702316008 -0800
@@ -0,0 +1,18 @@
+/* IP tables module for matching the value of the TTL
+ * (C) 2004 by Jim Mar <jmar@metavize.com> */
+
+#ifndef _IPT_BITMARK_H
+#define _IPT_BITMARK_H
+
+struct ipt_bitmark_info {
+	int		invertxct;
+	int		invertone;
+	int		invertzed;
+	unsigned long	exactval;
+	unsigned long	exactmsk;
+	unsigned long	anyone;
+	unsigned long	anyzed;
+	unsigned long	flags;
+};
+
+#endif
diff -Nru linux-2.6.14.2-orig/net/ipv4/netfilter/Kconfig linux-2.6.14.2-mv/net/ipv4/netfilter/Kconfig
--- linux-2.6.14.2-orig/net/ipv4/netfilter/Kconfig	2005-11-10 21:33:12.000000000 -0800
+++ linux-2.6.14.2-mv/net/ipv4/netfilter/Kconfig	2005-11-14 11:17:04.703315929 -0800
@@ -201,6 +201,16 @@
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config IP_NF_MATCH_BITMARK
+	tristate "netfilter BITMARK match support"
+	depends on IP_NF_IPTABLES
+	help
+	  Netfilter mark matching allows you to match packets based on the
+	  `nfmark' value in the packet.  This can be set by the MARK target
+	  (see below).
+
+	  To compile it as a module, choose M here.  If unsure, say N.
+
 config IP_NF_MATCH_MULTIPORT
 	tristate "Multiple port match support"
 	depends on IP_NF_IPTABLES
diff -Nru linux-2.6.14.2-orig/net/ipv4/netfilter/Makefile linux-2.6.14.2-mv/net/ipv4/netfilter/Makefile
--- linux-2.6.14.2-orig/net/ipv4/netfilter/Makefile	2005-11-10 21:33:12.000000000 -0800
+++ linux-2.6.14.2-mv/net/ipv4/netfilter/Makefile	2005-11-14 11:17:04.703315929 -0800
@@ -51,6 +51,7 @@
 obj-$(CONFIG_IP_NF_MATCH_MULTIPORT) += ipt_multiport.o
 obj-$(CONFIG_IP_NF_MATCH_OWNER) += ipt_owner.o
 obj-$(CONFIG_IP_NF_MATCH_TOS) += ipt_tos.o
+obj-$(CONFIG_IP_NF_MATCH_BITMARK) += ipt_bitmark.o
 obj-$(CONFIG_IP_NF_MATCH_RECENT) += ipt_recent.o
 obj-$(CONFIG_IP_NF_MATCH_ECN) += ipt_ecn.o
 obj-$(CONFIG_IP_NF_MATCH_DSCP) += ipt_dscp.o
diff -Nru linux-2.6.14.2-orig/net/ipv4/netfilter/ipt_bitmark.c linux-2.6.14.2-mv/net/ipv4/netfilter/ipt_bitmark.c
--- linux-2.6.14.2-orig/net/ipv4/netfilter/ipt_bitmark.c	1969-12-31 16:00:00.000000000 -0800
+++ linux-2.6.14.2-mv/net/ipv4/netfilter/ipt_bitmark.c	2005-11-14 11:17:04.704315851 -0800
@@ -0,0 +1,98 @@
+/* IP tables module for bit matching the value of the nfmark 
+ *
+ * (C) 2004 by Jim Mar <jmar@metavize.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+
+#include <linux/netfilter_ipv4/ipt_bitmark.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+
+MODULE_AUTHOR("Jim Mar <jmar@metavize.com>");
+MODULE_DESCRIPTION("IP tables nfmark bit matching module");
+MODULE_LICENSE("GPL");
+
+static int match(const struct sk_buff *skb, const struct net_device *in,
+		 const struct net_device *out, const void *matchinfo,
+		 int offset, int *hotdrop)
+{
+	const struct ipt_bitmark_info *info = matchinfo;
+	unsigned long x;
+
+	if (info->flags & 0x00000001) {
+		x = skb->nfmark & info->exactmsk;
+		if (info->invertxct == 0) {
+			if (x != info->exactval) {
+				return 0;
+			}
+		} else if (info->invertxct == 1) {
+			if (x == info->exactval) {
+				return 0;
+			}
+		}
+	}
+
+	if (info->flags & 0x00000002) {
+		x = skb->nfmark & info->anyone;
+		if (info->invertone == 0) {
+			if (x == 0) {
+				return 0;
+			}
+		} else if (info->invertone == 1) {
+			if (x != 0) {
+				return 0;
+			}
+		}
+	}
+
+	if (info->flags & 0x00000004) {
+		x = skb->nfmark & info->anyzed;
+		if (info->invertzed == 0) {
+			if (x == info->anyzed) {
+				return 0;
+			}
+		} else if (info->invertzed == 1) {
+			if (x != info->anyzed) {
+				return 0;
+			}
+		}
+	}
+
+	return 1;
+}
+
+static int checkentry(const char *tablename, const struct ipt_ip *ip,
+		      void *matchinfo, unsigned int matchsize,
+		      unsigned int hook_mask)
+{
+	if (matchsize != IPT_ALIGN(sizeof(struct ipt_bitmark_info)))
+		return 0;
+
+	return 1;
+}
+
+static struct ipt_match bitmark_match = {
+	.name		= "bitmark",
+	.match		= &match,
+	.checkentry	= &checkentry,
+	.me		= THIS_MODULE,
+};
+
+static int __init init(void)
+{
+	return ipt_register_match(&bitmark_match);
+}
+
+static void __exit fini(void)
+{
+	ipt_unregister_match(&bitmark_match);
+
+}
+
+module_init(init);
+module_exit(fini);
